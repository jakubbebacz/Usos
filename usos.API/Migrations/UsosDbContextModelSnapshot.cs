// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using usos.API;

namespace usos.API.Migrations
{
    [DbContext(typeof(UsosDbContext))]
    partial class UsosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("usos.API.Entities.Advert", b =>
                {
                    b.Property<Guid>("AdvertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("advert_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("DeaneryWorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("deanery_worker_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("AdvertId")
                        .HasName("pk_advert");

                    b.HasIndex("DeaneryWorkerId")
                        .HasDatabaseName("ix_advert_deanery_worker_id");

                    b.ToTable("advert");
                });

            modelBuilder.Entity("usos.API.Entities.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_accepted");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("note");

                    b.Property<Guid>("Recipent")
                        .HasMaxLength(50)
                        .HasColumnType("uuid")
                        .HasColumnName("recipent");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("ApplicationId")
                        .HasName("pk_application");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_application_student_id");

                    b.ToTable("application");
                });

            modelBuilder.Entity("usos.API.Entities.DeaneryWorker", b =>
                {
                    b.Property<Guid>("DeaneryWorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("deanery_worker_id");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("DeaneryWorkerId")
                        .HasName("pk_deanery_worker");

                    b.ToTable("deanery_worker");
                });

            modelBuilder.Entity("usos.API.Entities.DegreeCourse", b =>
                {
                    b.Property<Guid>("DegreeCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("degree_course_id");

                    b.Property<string>("DegreeCourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("degree_course_name");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.HasKey("DegreeCourseId")
                        .HasName("pk_degree_course");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_degree_course_department_id");

                    b.ToTable("degree_course");

                    b.HasData(
                        new
                        {
                            DegreeCourseId = new Guid("efdf7a83-a087-4572-bca3-01968464a5c5"),
                            DegreeCourseName = "Architektura",
                            DepartmentId = new Guid("e3757241-42e2-4f61-a358-f1c8e9699b13")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("313f8bfd-d643-44dc-b2fb-f7c84979bdc8"),
                            DegreeCourseName = "Budownictwo",
                            DepartmentId = new Guid("e3757241-42e2-4f61-a358-f1c8e9699b13")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("2a848f15-b441-4c1c-aa3c-d296db507644"),
                            DegreeCourseName = "Elektromobilność",
                            DepartmentId = new Guid("9ab8c1c2-2139-4998-9250-e02ad7123650")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("8133ad4f-6522-407f-a91a-97549da65c18"),
                            DegreeCourseName = "Elektrotechnika",
                            DepartmentId = new Guid("9ab8c1c2-2139-4998-9250-e02ad7123650")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("e05f28ea-85e5-477f-9f95-5f731c38a36a"),
                            DegreeCourseName = "Energetyka",
                            DepartmentId = new Guid("9ab8c1c2-2139-4998-9250-e02ad7123650")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("6c535e65-8d67-4fd0-b4b1-6eaeb8af34c4"),
                            DegreeCourseName = "Informatyka",
                            DepartmentId = new Guid("9ab8c1c2-2139-4998-9250-e02ad7123650")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("c077047c-f985-44d4-9d2d-f21cd3571f21"),
                            DegreeCourseName = "Teleinformatyka",
                            DepartmentId = new Guid("9ab8c1c2-2139-4998-9250-e02ad7123650")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("109f7f43-f17f-4de5-ac1e-b14a462fb447"),
                            DegreeCourseName = "Geodezja i kartografia",
                            DepartmentId = new Guid("87a0557a-68ca-4cbc-854d-1674f52158e7")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("40a4b8b9-5432-4854-84ec-704af9aaa382"),
                            DegreeCourseName = "Inżynieria środowiska",
                            DepartmentId = new Guid("87a0557a-68ca-4cbc-854d-1674f52158e7")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("c1db08e1-25fb-4e92-ad6a-e1d797d98cb7"),
                            DegreeCourseName = "Odnawialne źródła energii",
                            DepartmentId = new Guid("87a0557a-68ca-4cbc-854d-1674f52158e7")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("3bbd35cc-7727-4f2f-997d-96e254157eda"),
                            DegreeCourseName = "Automatyka i robotyka",
                            DepartmentId = new Guid("1e19b000-cf2b-4e48-ab46-72fef4ccac7c")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("fd1ee5e5-1bfd-4b6c-99fc-21ca4c7144ef"),
                            DegreeCourseName = "Mechanika i budowa maszyn",
                            DepartmentId = new Guid("1e19b000-cf2b-4e48-ab46-72fef4ccac7c")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("7514321c-d664-47ab-b522-3f4e17d41403"),
                            DegreeCourseName = "Ekonomia",
                            DepartmentId = new Guid("daed2e1e-f52f-4e53-a7e8-e3398630f404")
                        },
                        new
                        {
                            DegreeCourseId = new Guid("82e3b4d8-a54f-40a0-a1a4-fd21d6c9ef21"),
                            DegreeCourseName = "Logistyka",
                            DepartmentId = new Guid("daed2e1e-f52f-4e53-a7e8-e3398630f404")
                        });
                });

            modelBuilder.Entity("usos.API.Entities.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_name");

                    b.HasKey("DepartmentId")
                        .HasName("pk_department");

                    b.ToTable("department");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("87a0557a-68ca-4cbc-854d-1674f52158e7"),
                            DepartmentName = "ISGiE"
                        },
                        new
                        {
                            DepartmentId = new Guid("e3757241-42e2-4f61-a358-f1c8e9699b13"),
                            DepartmentName = "WBiA"
                        },
                        new
                        {
                            DepartmentId = new Guid("1e19b000-cf2b-4e48-ab46-72fef4ccac7c"),
                            DepartmentName = "WMiBM"
                        },
                        new
                        {
                            DepartmentId = new Guid("9ab8c1c2-2139-4998-9250-e02ad7123650"),
                            DepartmentName = "WEAiI"
                        },
                        new
                        {
                            DepartmentId = new Guid("daed2e1e-f52f-4e53-a7e8-e3398630f404"),
                            DepartmentName = "WZiMK"
                        });
                });

            modelBuilder.Entity("usos.API.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("DegreeCourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("degree_course_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Term")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("term");

                    b.HasKey("GroupId")
                        .HasName("pk_group");

                    b.HasIndex("DegreeCourseId")
                        .HasDatabaseName("ix_group_degree_course_id");

                    b.ToTable("group");
                });

            modelBuilder.Entity("usos.API.Entities.Lecturer", b =>
                {
                    b.Property<Guid>("LecturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_id");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("first_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("LecturerId")
                        .HasName("pk_lecturer");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_lecturer_department_id");

                    b.ToTable("lecturer");
                });

            modelBuilder.Entity("usos.API.Entities.LecturerGroup", b =>
                {
                    b.Property<Guid>("LecturerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_group_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.HasKey("LecturerGroupId")
                        .HasName("pk_lecturer_group");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_lecturer_group_group_id");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_lecturer_group_lecturer_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_lecturer_group_subject_id");

                    b.ToTable("lecturer_group");
                });

            modelBuilder.Entity("usos.API.Entities.Questionnaire", b =>
                {
                    b.Property<Guid>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("questionnaire_id");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("lecturer_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<int>("Rating")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("QuestionnaireId")
                        .HasName("pk_questionnaire");

                    b.HasIndex("LecturerId")
                        .HasDatabaseName("ix_questionnaire_lecturer_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_questionnaire_student_id");

                    b.ToTable("questionnaire");
                });

            modelBuilder.Entity("usos.API.Entities.Rector", b =>
                {
                    b.Property<Guid>("RectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("rector_id");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("RectorId")
                        .HasName("pk_rector");

                    b.ToTable("rector");

                    b.HasData(
                        new
                        {
                            RectorId = new Guid("0912ef3e-a9e6-49f0-a11d-2924609f7fc1"),
                            CardId = "000000",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            PhoneNumber = "000000000",
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("usos.API.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("IndexNumber")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("index_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<int?>("Semester")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("semester");

                    b.HasKey("StudentId")
                        .HasName("pk_student");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_student_group_id");

                    b.ToTable("student");
                });

            modelBuilder.Entity("usos.API.Entities.StudentSubject", b =>
                {
                    b.Property<Guid>("StudentSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("student_subject_id");

                    b.Property<double[]>("Marks")
                        .HasMaxLength(100)
                        .HasColumnType("double precision[]")
                        .HasColumnName("marks");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.HasKey("StudentSubjectId")
                        .HasName("pk_student_subject");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_student_subject_student_id");

                    b.ToTable("student_subject");
                });

            modelBuilder.Entity("usos.API.Entities.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid>("DegreeCourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("degree_course_id");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("subject_name");

                    b.HasKey("SubjectId")
                        .HasName("pk_subject");

                    b.HasIndex("DegreeCourseId")
                        .HasDatabaseName("ix_subject_degree_course_id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("usos.API.Entities.Advert", b =>
                {
                    b.HasOne("usos.API.Entities.DeaneryWorker", "DeaneryWorker")
                        .WithMany("Adverts")
                        .HasForeignKey("DeaneryWorkerId")
                        .HasConstraintName("fk_advert_deanery_worker_deanery_worker_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeaneryWorker");
                });

            modelBuilder.Entity("usos.API.Entities.Application", b =>
                {
                    b.HasOne("usos.API.Entities.Student", "Student")
                        .WithMany("Applications")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_application_student_student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("usos.API.Entities.DegreeCourse", b =>
                {
                    b.HasOne("usos.API.Entities.Department", "Department")
                        .WithMany("DegreeCourses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_degree_course_department_department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("usos.API.Entities.Group", b =>
                {
                    b.HasOne("usos.API.Entities.DegreeCourse", "DegreeCourse")
                        .WithMany("Groups")
                        .HasForeignKey("DegreeCourseId")
                        .HasConstraintName("fk_group_degree_course_degree_course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeCourse");
                });

            modelBuilder.Entity("usos.API.Entities.Lecturer", b =>
                {
                    b.HasOne("usos.API.Entities.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_lecturer_department_department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("usos.API.Entities.LecturerGroup", b =>
                {
                    b.HasOne("usos.API.Entities.Group", "Group")
                        .WithMany("LecturerGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_lecturer_group_group_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usos.API.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerGroups")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("fk_lecturer_group_lecturer_lecturer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usos.API.Entities.Subject", "Subject")
                        .WithMany("LecturerGroups")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_lecturer_group_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lecturer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("usos.API.Entities.Questionnaire", b =>
                {
                    b.HasOne("usos.API.Entities.Lecturer", "Lecturer")
                        .WithMany("Questionnaires")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("fk_questionnaire_lecturer_lecturer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usos.API.Entities.Student", "Student")
                        .WithMany("Questionnaires")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_questionnaire_student_student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("usos.API.Entities.Student", b =>
                {
                    b.HasOne("usos.API.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_student_group_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("usos.API.Entities.StudentSubject", b =>
                {
                    b.HasOne("usos.API.Entities.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_student_subject_student_student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("usos.API.Entities.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("fk_student_subject_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("usos.API.Entities.Subject", b =>
                {
                    b.HasOne("usos.API.Entities.DegreeCourse", "DegreeCourse")
                        .WithMany("Subjects")
                        .HasForeignKey("DegreeCourseId")
                        .HasConstraintName("fk_subject_degree_course_degree_course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeCourse");
                });

            modelBuilder.Entity("usos.API.Entities.DeaneryWorker", b =>
                {
                    b.Navigation("Adverts");
                });

            modelBuilder.Entity("usos.API.Entities.DegreeCourse", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("usos.API.Entities.Department", b =>
                {
                    b.Navigation("DegreeCourses");

                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("usos.API.Entities.Group", b =>
                {
                    b.Navigation("LecturerGroups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("usos.API.Entities.Lecturer", b =>
                {
                    b.Navigation("LecturerGroups");

                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("usos.API.Entities.Student", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Questionnaires");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("usos.API.Entities.Subject", b =>
                {
                    b.Navigation("LecturerGroups");

                    b.Navigation("StudentSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
